[
{"title":"Introduction", "arr":
  [{"title":"Getting Started: The Easy Problems", "arr":[
    ["I/O + Sequences Only", -10071, -11614, 11805, 12478, -13025
    ],["Repetition Only", -1124, 10055, -11044, -11547
    ],["Multiple Test Cases + Selection", 621, -11172, 11723, 11727, -12250, 12289, -12372, 12468, 12577, 12646, 12917
    ],["Control Flow", 272, 10300, 11364, 11498, -11764, -11799, -12279, 12403, 13012, 13034, 13130
    ],["Function", -1709, -10424, 10550, -11078, -11332, -11687
    ],["1D Array Manipulation, Easier", -1585, -11679, 11942, -12015
    ],["Easy", 1641, 10963, -12503, 12554, -12658, -12696, 12750, 12798
    ],["Still Easy", 10114, 10141, 10324, 10919, -11559, 11586, 11661, -11683, -11786, 12614, 13007
    ],["Medium", 119, 573, 661, 1237, -11507, 11956, -12157, -12545, -12643
  ]]},{"title":"Ad Hoc Problems - Part 1", "arr":[
    ["Game (Card)", 162, 462, 555, 10205, 10315, -10388, -10646, 11225, -11678, -12247, 12366, 12952
    ],["Game (Chess)", -255, -278, -696, 10196, -10284, 10849, 11494
    ],["Game (Others), Easier", 340, -489, -947, -10189, 10279, 10409, 10530, -11459, 12239
    ],["Game (Others), Harder", 114, 141, 220, 227, 232, 339, 379, -584, 647, -10363, 10443, -10813, 10903, -11013
  ]]},{"title":"Ad Hoc Problems - Part 2", "arr":[
    ["Interesting Real Life Problems, Easier", 362, -637, -1586, 10082, 10554, 11530, 11744, 11945, 11984, 12195, 12808, -13151
    ],["Interesting Real Life Problems, Medium", -161, 187, 447, 457, 857, 10191, -10528, -10812, -11736, 11743, 12555
    ],["Interesting Real Life Problems, Harder", 139, 145, 333, 346, 403, 448, 449, 538, -706, -1061, -1091, 10415, 10659, 11223, -11279, 12342, 12394
  ]]},{"title":"Ad Hoc Problems - Part 3", "arr":[
    ["Time, Easier", -579, 893, 10683, 11219, 11356, 11650, 11677, 11958, 12019, -12136, -12148, 12531, 13275
    ],["Time, Harder", 150, 158, 170, 300, 602, 10070, 10339, 10371, -10942, -11947, 12439, -12822
    ],["Roman Numerals", -185, -344, -759, -11616, -12397
    ],["Cipher/Encode/Encrypt/Decode/Decrypt, Easier", 444, 458, 641, 795, 865, 1339, 10019, 10222, -10851, 10878, 10896, 10921, 11220, -11278, 11541, 11946, -12896, 13107, -13145
    ],["Cipher/Encode/Encrypt/Decode/Decrypt, Medium", -245, 483, -492, 632, 739, 740, 11716, -11787
  ]]},{"title":"Ad Hoc Problems - Part 4", "arr":[
    ["Input Parsing (Iterative)", 271, 327, 391, -397, 442, 486, 537, -1200, 10252, -10906, 11148, -11878, 12543, 12820, 13047, 13093
    ],["Output Formatting, Easier", 110, 320, 445, -488, 490, -1605, 10146, -10500, 10894, 11074, 11482, 11965, -12364, 13091
    ],["Time Waster Problems, Easier", 144, 214, 335, 349, 556, -1721, 10028, 10033, 10134, 10281, 10850, -11638, 12060, -12085, -12608, 12700
    ],["Time Waster Problems, Harder", 337, -405, 381, 603, 618, 830, 945, 10142, -10188, 10267, 10961, 11140, -11717, -12280
  ]]}]},

  {"title":"Data Structures and Libraries", "arr":
  [{"title":"Linear Data Structures with Built-in Libraries", "arr":[
    ["1D Array Manipulation, Medium", 414, 482, 591, -10038, 10050, 11192, 11496, 11608, 11875, -12150, -12356, 12854, 12959, 12996, 13026, -13181
    ],["1D Array Manipulation, Harder", 230, 394, 467, 665, 946, -10978, 11093, -11222, 11850, -12662, -13048
    ],["2D Array Manipulation, Easier", 541, 585, 10703, 10920, 11040, 11349, -11581, 11835, -12187, -12667, 12981
    ],["2D Array Manipulation, Harder", 101, 434, -466, 512, 707, 10016, 10855, -11360, -12291, 12398
    ],["Sorting, Easier", 400, 855, -10107, 10880, 10905, 11039, 11588, 11777, 11824, 12071, -12541, -12709, 12861, 13113
    ],["Sorting, Harder", 123, 450, 790, -1610, 10194, -10258, 10698, 11300, -11321, 12269
    ],["Special Sorting Problems", 299, -612, 10327, 10810, -11462, -11495, 11858, -13212
    ],["Bit Manipulation", 594, 700, 1241, -10264, 10469, 11173, 11760, 11926, -11933, -12571, -12720
    ],["Big Integer", 424, 465, 619, -713, 748, 1226, 1647, 10013, 10083, 10106, 10198, 10430, 10433, 10464, 10494, 10519, -10523, 10669, -10925, 10992, 11448, 11664, 11821, 11830, -11879, 12143, 12459, 12930
    ],["Stack", 127, -514, 732, -1062, 10858, -13055
    ],["Special Stack-based Problems", -551, -673, -727, -11111
    ],["List/Queue/Deque", 246, 540, -10172, 10901, 10935, 11797, 11034, -11988, 12100, -12108, 12207
  ]]},{"title":"Non Linear Data Structures with Built-in Libraries", "arr":[
    ["Priority Queue", -1203, 11995, -11997, -13190
    ],["Direct Addressing Table (DAT), ASCII", -499, 895, 10008, 10062, -10260, 10293, 10625, -11340, -11577, -12626
    ],["Direct Addressing Table (DAT), Others", 755, -1368, -11203, -12650
    ],["Hash Table (set)", -10887, -11849, -12049, -13148
    ],["Hash Table (map), Easier", 484, 860, -902, 10282, 10295, 10374, 10686, -11286, -11348, -11629, 12592
    ],["Hash Table (map), Harder", -417, 10132, -10145, 11572, -11860, 11917
    ],["Balanced BST (set)", 501, -978, -10815, 11062, -11136, -13037
    ],["Balanced BST (map)", 939, -10138, 10226, 10420, 11239, -11308, -12504
    ],["Order Statistics Tree", 10909
  ]]},{"title":"Data Structures with Our-Own Libraries", "arr":[
    ["Graph Data Structures Problems", -599, -10895, 10928, -11550, -11991
    ],["Union-Find Disjoint Sets", 793, -1197, -1329, 10158, 10227, 10507, 10583, -10608, -10685, 11503, 11690, -11987
    ],["Tree-related Data Structures", 297, 1232, -1513, 11235, 11297, 11350, -11402, -11423, 12086, -12299, 12532
  ]]}]},

  {"title":"Problem Solving Paradigms", "arr":
  [{"title":"Complete Search", "arr":[
    ["Pre-calculate-able", -165, 167, 256, 347, -750, 861, -10128, 10177, -10276, 11085
    ],["Iterative (Two Nested Loops)", 105, -592, 617, 1260, -1588, 10041, -10487, 10570, 10670, 10730, 11242, 12205, -12488, 12583, 13018
    ],["Iterative (Three or More Nested Loops, Easier)", 154, -441, 626, 703, -735, 10102, 10662, 10908, 11059, 12498, -12515, 12801, -12844
    ],["Iterative (Three or More Nested Loops, Harder)", 253, 296, -386, 10360, 10365, 10483, 10502, -10660, 10973, 11108, -11236, 11342, 11548, 11565, -11804, 11959, 11975, 12337
    ],["Iterative (Permutation)", 140, 146, -234, 418, -1064, 1209, 10997, 11412, -11742, -12249
    ],["Iterative (Combination)", 435, 517, -639, -1047, 11205, -11659, 12346, 12348, 12406, -12694, 13103
    ],["Try All Possible Answer(s)", 102, -188, 471, -725, 471, -10908
    ],["Mathematical Simulation (Complete Search), Easier", 100, 371, -382, 654, 906, -1225, 1583, -10346, 10370, 10783, 10879, 11001, 11150, 11247, 11313, 11689, 11877, 11934, 12527, 12938, 13059, 13131
    ],["Mathematical Simulation (Complete Search), Harder", 493, 550, -616, 697, 846, 10025, 10035, 10624, -11130, -11254, -11490, 11968, 12169, 12290, 12665, 12792, 12895
    ],["Josephus Problem", 130, 133, -151, 305, 402, 440, -1176, 10015, 10771, -10774, -11351
    ],["Recursive Backtracking (Easy)", 380, 487, 524, 529, 571, 598, 628, 677, -729, 868, -10344, 10452, 10503, -10576, 10624, 10776, 10950, 11201, 11961, -12840
    ],["Recursive Backtracking (Harder)", 129, -208, -222, 301, -307, 331, 416, 433, 565, -1262, 10001, 10063, 10094, 10460, 10582, 10460, 10475, 10582, 11052, 11753
  ]]},{"title":"Divide and Conquer", "arr":[
    ["Binary Search", 679, 957, 10057, 10077, 10474, 10567, 10611, 10706, 10742, -11057, -11621, 11876, -12192, -12965
    ],["Bisection Method and BSTA (Easier)", 1753, 10341, 11413, 11627, 11692, 11881, 11935, -12032, -12190, 12791, -13142
    ],["Ternary Search and Others", -183, 608, -1738, -10385, -11147, 11701, -12893
  ]]},{"title":"Greedy", "arr":[
    ["Classical", 410, -1193, -10020, 10249, 10382, -11264, 11292, 11389, 12210, -12321, 12405
    ],["Involving Sorting (Or The Input Is Already Sorted), Easier", 10763, 10785, 11269, -11369, -11729, -11900, 12485, 13031, -13109
    ],["Involving Sorting (Or The Input Is Already Sorted), Harder", -10026, 10037, 11100, 11103, -12673, -12834, -13054
    ],["Inovoling Priority Queue", -1153, -10954, -12390, -13177
    ],["Non Classical, Easier", 10152, -10340, 10440, 10602, -10656, 10672, 10700, 10714, 11054, -11520, 11532, -12482
    ],["Non Classical, Harder", 311, 668, 10718, -10821, 10982, 11157, 11230, 11240, 11330, 11335, -11491, 11567, -11583, -11890, 12124, 12516, 13082
  ]]},{"title":"Dynamic Programming", "arr":[
    ["Max 1D/2D Range Sum", 108, 507, -787, 836, 983, -1105, 10074, 10667, -10684, -10755, 10827, 11951, 12640, 13095
    ],["Longest Increasing Subsequence (LIS)", 111, 231, 437, -481, 497, -1196, 10131, 10154, -10534, -11368, 11456, -11790
    ],["0-1 Knapsack (Subset Sum)", 431, 562, 990, -1213, -10130, 10261, 10616, 10664, 10690, 10819, 11003, 11341, -11566, 11658, -11832, 12621
    ],["Coin Change (CC)", 147, 166, -242, 357, -674, 10313, -10448, 11137, -11259, -11517
    ],["Traveling Salesman Problem (TSP)", -216, -1281, -10496, -11795, -12841
    ],["DP level 1", 116, 196, 215, 1261, -10003, 10036, 10086, 10337, 10446, 10520, 10688, 10721, 10910, -10912, 10943, 10980, 11026, 11407, -11420, 11450, 11703, 12654, 12951, -13141
    ],["DP level 2", -662, 10039, 10069, 10081, 10120, 10164, 10239, 10400, 10465, 10651, 11485, 11514, 11908, -12324, -12862, -12955
  ]]}]},

  {"title":"Graph", "arr":
  [{"title":"Graph Traversal", "arr":[
    ["Finding Connected Components", 260, 280, -459, 10687, -11518, -11749, 11841, 11902, -11906
    ],["Flood Fill, Easier", -352, 469, -572, 657, 722, -871, 10336, 11244, 11470, -11561, -11953
    ],["Flood Fill, Harder", 601, 705, 758, 776, 782, 784, 785, -852, -1103, 10592, 10707, 10946, -11094, 11110, -11585
    ],["Topological Sort", 124, -200, -872, 10305, -11060, 11686
    ],["Bipartite or Cycle Check", 840, -10004, -10116, -10505, 10510, 11080, 11396
    ],["Finding Articulation Points/Bridges", -315, 610, 796, 10199, -10765, -12363, -12783
    ],["Finding Strongly Connected Components", -247, 1229, 10731, -11504, -11709, -11770, -11838
    ],["Ad Hoc Graph Traversal", 118, 168, 173, 318, 614, -824, 10113, 10377, -11831, -12376, -12442, 12582, 12648, 13015, 13038
  ]]},{"title":"Minimum Spanning Tree", "arr":[
    ["Standard", 908, 1174, 1208, 1235, 10034, -11228, -11631, 11710, 11733, -11747, 11857
    ],["Variants", 534, 544, -1013, 1160, 1216, 1234, -1265, -10048, 10099, 10147, 10369, 10397, -10457, 10462, 10600, 10842
  ]]},{"title":"Single-Source Shortest Paths (SSSP)", "arr":[
    ["On Unweighted Graph: BFS, Easier", -336, 388, -429, 627, 762, 924, 1148, 10009, 10610, -10653, 10959, -12160
    ],["On Unweighted Graph: BFS, Harder", 314, 383, 532, 859, 949, 10044, 10067, 10977, 10993, 11049, -11101, -11352, 11377, -11573, 11624, -11792, -12826
    ],["Knight Moves", -439, -633, -10426, -10477
    ],["On Weighted Graph: Dijkstra's, Easier", 929, -1112, 10389, -10986, -12878, -13127
    ],["On Weighted Graph: Dijkstra's, Harder", 157, 523, -589, 721, 1202, 10166, 10187, 10278, 10280, 10356, 10603, 10801, 10967, 11338, 11367, 11377, 11492, 11833, -12047, 12144, -12950
    ],["On Graph with Negative Weight Cycle: Bellman Ford's", 423, -558, -10449, -10557, -11280, -12768
  ]]},{"title":"All-Pairs Shortest Paths", "arr":[
    ["Standard", 341, 567, -821, 1233, -1247, 10171, -10354, 10525, 10724, 10793, 10803, 10947, 11015, -11463, 12319, 13249
    ],["Variants", 104, 125, 186, 274, 334, 436, -869, 925, -1056, 1198, 1757, 10246, 10331, -10342, 10436, -10987, 11047
  ]]},{"title":"Special Graphs", "arr":[
    ["Shortest/Longest Paths on DAG", 103, -452, 10000, 10051, -10259, 10285, -10350
    ],["DP, Counting Paths in DAG, Easier", -825, 926, 986, 988, 10401, -10544, 10564, 10926, 11067, -11569, 11655, -11957
    ],["Converting General Graph to DAG", -590, 607, 757, -907, 910, 1025, 10201, 10271, 10543, 10681, 10702, 10874, -10913, 11307, 11487, 11545, 11782, -12875, 13122
    ],["Tree", 112, 115, 122, -536, 548, 615, 699, 712, 839, 10308, 10459, 10701, -10805, 11131, 11234, 11615, -11695, 12186, -12347, -12379
    ],["Bipartite Graph", 663, -670, 753, 10080, -11138, -12644, -12668
    ],["Eulerian Graph", 117, -291, 302, -10054, 10129, -10203, -10596
  ]]}]},

  {"title":"Mathematics", "arr":
  [{"title":"Ad Hoc Mathematics Problems", "arr":[
    ["Finding (Simple) Formula (or Pattern), Easier", 1315, 10014, 10110, 10170, 10499, 10696, -10751, 10773, 10940, 11202, 11393, -12004, 12027, 12502, 12725, -12918, 12992, 13049, 13071, 13216
    ],["Finding (Simple) Formula (or Pattern), Harder", 651, 913, -10161, 10257, 10493, 10509, 10666, 10693, 10710, 10882, 10970, 10994, -11038, 11170, -11231, 11246, 11296, 11298, 11387, -11718, 12909, 13096, 13140
    ],["Base Number Conversion", 290, -343, 355, -389, 446, 10473, -10551, 11185, -11952
    ],["Base Number Variants", -377, -575, 636, 10093, 10677, -10931, 11005, 11121, 11398, 12602
    ],["Number Systems or Sequences", 136, 138, 413, -443, 640, 694, 927, 962, 974, 10006, 10042, 10049, 10101, -10408, 10930, 11028, 11063, 11461, 11660, -11970, 12149, 12751, 13161
    ],["Logarithm, Exponentiation, Power", 107, 113, 474, 545, -701, 1185, -10916, -11384, 11556, 11636, 11666, 11714, -11847, 11986, 12416
    ],["Grid", 121, -264, 808, 880, -10022, -10182, -10233, 10620, 10642, 10964, 12705
    ],["Polynomial", 126, 392, 498, -930, 10215, -10268, -10302, 10326, -10586, 10719
    ],["Fraction", -332, -834, 10555, 10814, 10976, -12068, 12848, 12970
    ],["Just Ad Hoc", 276, -496, 613, 10023, -10137, 10190, 11042, 11055, -11241, -11526, 11715, 11816, -12036
  ]]},{"title":"Number Theory", "arr":[
    ["Prime Numbers", 406, -543, 686, 897, 914, -1644, 10140, 10168, 10311, 10394, 10490, -10650, 10852, 10948, -11752
    ],["(Probabilistic) Prime Testing", 960, -1180, -1210, -10235, 10924, 11287, 12542
    ],["Finding Prime Factors", 516, -583, 10392, -11466, -12703, -12805
    ],["Functions involving Prime Factors", -294, 884, 1246, -10179, 10290, 10299, 10820, 10958, 11064, 11086, 11226, -11353, -11728, 12005, 13185, -13194
    ],["Modified Sieve", -10699, 10738, -10990, 11327, -11426, -12043
    ],["GCD and/or LCM", 106, 412, 10193, -10407, -10892, -11388, -11417, 11774, 11827, 12708, 12852
    ],["Factorial", 324, 568, 623, 10220, 10323, 10338, -11076, -12335, -12869, 12934
    ],["Working with Prime Factors", 160, 993, 10061, -10139, 10484, 10527, 10622, -10680, 10780, 10791, -11347, -11395, 11889, 13067
    ],["Modular Arithmetic", 128, 10127, -10174, -10176, -10212, -10489
    ],["Extended Euclidean", -10090, -10104, -10633, -10673
    ],["Divisibility Test", -10922, -10929, -11344, -11371
  ]]},{"title":"Combinatorics", "arr":[
    ["Fibonacci Numbers", -495, 580, -763, 900, 948, 1258, 10183, -10334, 10450, 10497, 10579, -10689, 10862, 11000, 11089, 11161, 11780, 12281, 12620
    ],["Binomial Coefficients", 326, -369, 485, 530, 911, 10105, -10219, 10375, 10532, -10541, -11955, -12712
    ],["Catalan Numbers", -991, -10007, -10223, 10303, -10312, 10643
    ],["Others, Easier", 10079, 11115, -11310, -11401, 11480, -11597, 11609, -12463
    ],["Other, Harder", 153, 941, -1224, 10359, 10733, -10784, 10790, 10918, -11069, 11204, 11270, -11538, 11554, 12001, 12022
  ]]},{"title":"Cycle-Finding", "arr":[
    ["Cycle-Finding", 202, 275, -350, 408, 547, 942, 944, 10162, 10515, 10591, -11036, -11053, -11511, 11549, 11634, 12464, 13217
  ]]},{"title":"Probability Theory", "arr":[
    ["Probability Theory, Easier", -1636, -10238, 10328, -10491, 10759, -11181, 12024, 12114, 12230, 12457, 12461
  ],["Probability Theory, Harder", 542, 557, -10056, 10218, -10648, 10777, 11021, -11176, 11346, 11500, -11628, 11762 
  ]]},{"title":"Game Theory (Basic)", "arr":[
    ["Game Theory (Basic)", 847, -10111, -10368, 10404, -10536, 10578, -11489, 12293, 12469
  ]]},{"title":"Matrix Power", "arr":[
    ["Matrix Power", 374, 1230, -10229, 10518, -10655, 10870, 11029, 11486, -11582, 12470, -12796
  ]]}]},

  {"title":"String Processing", "arr":
  [{"title":"Ad Hoc String Processing Problems", "arr":[
    ["Cipher/Encode/Encrypt/Decode/Decrypt, Harder", 179, -213, 306, 385, 468, -554, 632, 726, 740, 741, 850, 856, -11385, -11697
    ],["Input Parsing (Recursive)", 134, 171, 172, 384, 464, 533, 586, 620, 622, 743, -10854, -11070, -11291
    ],["Regular Expression", -325, -494, -576, -10058
    ],["Output Formatting, Harder", 159, 330, 338, 373, 426, 570, 645, 848, 890, -918, 1219, 10333, 10562, 10761, 10800, 10875, -11403, -12155
    ],["String Comparison", 409, -644, 671, 912, -11048, -11056, 11233, 11713, -11734
    ],["Really Ad Hoc", 263, 892, 943, 1215, 10045, 10115, 10126, 10197, 10361, 10391, -10393, 10508, 10679, 11452, -11483, 11839, 11962, 12243, 12414, -12916
  ]]},{"title":"String Processing with Dynamic Programming", "arr":[
    ["Classic", 164, 526, 531, -1192, 1207, 1244, 10066, 10100, 10192, -10405, -10635, -12747, -13146
    ],["Non Classic", -11022, 11081, 11084, -11258, -11361, -11552, 12855
  ]]},{"title":"String Matching", "arr":[
    ["Standard", -455, 886, -1449, -10298, 11362, -11576, -11837
    ],["In 2D Grid", -422, 604, -736, -10010, -11283
  ]]},{"title":"Suffix Array", "arr":[
    ["Suffix Array", 719, 760, 1223, -1254, -1584, 11107, -11512, -11855, 12506
  ]]},{"title":"String Hashing", "arr":[
    ["String Hashing", -11475, -12467, -12604
  ]]},{"title":"Anagram and Palindrome", "arr":[
    ["Anagram", 148, -156, -195, 454, 630, -642, 10098, -12641, -12770
    ],["Palindrome (Checking)", 257, 353, -401, -10848, 10945, 11221, 11309, -11584, -11888, 12960
    ],["Palindrome (Generating)", -1239, -10018, 10453, 10617, 10739, 11151, -11404, -12718
  ]]}]},

  {"title":"(Computational) Geometry", "arr":
  [{"title":"Basic Geometry - Part 1", "arr":[
    ["Points", 152, -587, 920, -1595, 10357, 10466, 10585, 10832, -10865, -10927, 11012, 11505, -11894, 12704
    ],["Lines", 191, 378, 833, 837, 866, 1249, 10242, 10250, -10263, 10902, 11068, 11343, 11519, -11783, -13117
    ],["Circles (only)", -1388, -10005, 10136, 10180, 10209, 10221, 10283, 10287, 10432, 10451, 10573, 10589, -10678, 12578, 12748
  ]]},{"title":"Basic Geometry - Part 2", "arr":[
    ["Triangles (Trigonometry)", 313, -427, 10210, 10286, 10387, 10792, -11326, -11854, -11909, 12901
    ],["Triangles (plus Circles)", 143, 190, 375, -438, 10195, 10347, 10522, -10577, 10991, 11152, 11164, -11281, 11437, 11479, 11579, 11936, -13215
    ],["Quadrilaterals", 155, -209, 460, 476, 477, 11207, 11314, 11345, 11455, 11639, 11648, -11800, 11834, -12256, 12611, 12894
  ]]},{"title":"Polygon", "arr":[
    ["Polygon, Easier", 478, -634, 681, 1206, 10060, 10112, 11072, 11096, -11447, -11473, 11626
    ],["Polygon, Harder", 109, 132, 137, 218, -361, 596, 858, -1111, 10002, 10065, -10256, 10406, 10445, 10652, -11265
  ]]},{"title":"3D Geometry", "arr":[
    ["3D Geometry", 535, -737, -815, -1280, -10297, 10316, 10897, -11817
  ]]}]},

  {"title":"More Advanced Topics", "arr":
  [{"title":"Problem Decomposition", "arr":[
    ["Two Components - BSTA and Other, Easier", -714, 10566, 10606, 10668, 10804, -10816, -11262, 11646, -12097, 12851, 12853, 12908
    ],["Two Components - BSTA and Other, Harder", -1221, 1577, 10372, -10537, -10983, -11516, 11670, 12255, 12428
    ],["Two Components - Involving Efficient Data Structure, Easier", 10789, -11960, 11966, 11967, -12318, -12460, 13135
    ],["Two Components - Involving Efficient Data Structure, Harder", -843, 922, -10150, 10734, -11474, -11525
    ],["Two Components - Geometry and Complete Search", 142, 184, 201, 270, 356, 638, 688, -10012, -10167, 10301, -10310, -10823, -11227, -11515, -11574
    ],["Two Components - Geometry and Other", -10514, -11008, -12322
    ],["Two Components - Involving Graph", 273, -393, 521, 1039, -1092, 1243, 1263, 10068, 10075, 10307, 11267, 11635, 11721, 11730, 12070, 12101, -12159, -12797
    ],["Two Components - Involving Mathematics", -1069, 1195, 10325, 10419, 10427, -10539, 10637, 10717, 11099, -11282, 11415, 11428, -12218, 12802
    ],["Two Components - Graph Preprocessing and DP", -976, -10917, -10937, 10944, 11284, -11324, -11331, 11405, 11643, 11693, 11813
    ],["Two Components - Involving DP 1D RSQ/RMQ", 967, 10200, -10533, 10871, -10891, -11032, -11105, -11408, 11491, 12028, 12904
    ],["Three (or More) Components, Easier", -295, -1250, -10856, 10876, 11610
    ],["Three (or More) Components, Harder", -811, -1040, -1079, 1093, 11288, 12392
  ]]},{"title":"More Advanced Search Techniques", "arr":[
    ["More Challenging Backtracking Problems", 131, 211, 387, 710, -711, -1052, 10202, 10309, 10318, 10422, 10890, 11090, 11127, 11195, -11451, 11464, 11471, -11699
    ],["State-Space Search, BFS, Easier", 298, 928, -1600, -10047, 10097, -10306, 10682, -11513, 11974, -12135
    ],["State-Space Search, BFS, Harder", 321, 704, 816, 985, 1251, 1253, -1714, 10021, 10085, 11160, -11198, -11212, -11329, -12445, 12569
    ],["More Challenging State-Space Search with BFS or Dijkstra's", -658, -1048, -1057, -10269, 10923, 11374
  ]]},{"title":"More Advanced DP Techniques", "arr":[
    ["DP level 3", -672, 882, -1172, -1211, 10163, 10604, -10645, 10898, 11002, 11285, 11523, 11555, 12208, 12563
    ],["DP level 4", 473, 812, 1222, 1231, -1238, 10029, 10118, -10304, 10482, 10559, 10626, -12870
    ],["DP, Counting Paths in DAG, Harder", -702, 10722, -11125, 11133, -11375, -11432, 12063
    ],["DP with Bitmask", 1076, -1099, 1240, -1252, 10123, 10149, 10364, 10817, -10911, 11218, 11391, 11472, 11806, -11825, 12030
  ]]},{"title":"NP-hard/complete Problems", "arr":[
    ["Small Instances, Easier", 193, 539, 574, 624, 775, -989, 10957, -11088, -12455
    ],["Small Instances, Harder", -1098, 1217, 10032, 10125, 10160, -10571, 11065, -11095, -12911
    ],["Special Cases, Easier", 1194, -1347, 10243, 10349, -10859, -11159, -11357, 11419, 12083, 12168, 13115
    ],["Special Cases, Harder", -1086, -1096, -1184, 1201, -1212, 1220, 10319, -11294
  ]]},{"title":"Network Flow", "arr":[
    ["Standard", 259, -820, 10092, 10511, 10779, 11045, 11082, -11167, -11418, -12873
    ],["Variants", -563, 1242, 10330, 10480, -11380, 11506, -11757, -11765, 12125
  ]]}]},

  {"title":"Rare Topics", "arr":
  [{"title":"Rare Algorithms", "arr":[
    ["Sliding Window", -261, -1121, -11536
    ],["Pollard's rho Integer Factoring Algorithm", -11476
    ],["Formulas or Theorems", 1185, -1645, 10088, 10178, 10213, 10219, 10720, 10843, 11414, -11719, -12786, 12876, 12967, -13108
    ],["Gaussian Elimination", -684, -11319
    ],["A* or IDA*", -652, -656, -10181, -11163
    ],["Dynamic Programming Optimization", -10003, -10304
    ],["Kuhn-Munkres (Hungarian) Algorithm", -1045, -10746, -10888, -11553
    ],["Edmonds' Matching Algorithm", -11439
  ]]},{"title":"Rare Problems", "arr":[
    ["Tower of Hanoi", 254, -10017, -10254
    ],["Matrix Chain Multiplication", -348
    ],["Lowest Common Ancestor", -10938, -12238
    ],["de Bruijn Sequence", -10040, -10244, -10506
    ],["Chinese Remainder Theorem", -756, -11754
    ],["Combinatorial Game Theory", -1566, -10165, -10561, -11311, -11534
    ],["Art Gallery Problem", -588, -1304, -1571, -10078
    ],["Closest Pair Problem", -10245, -11378
    ],["Pancake Sorting", -120
    ],["Egg Dropping Puzzle", -10934
    ],["Min Cost (Max) Flow", -10594, -10806, -11301, -12821
    ],["Chinese Postman Problem", -10296
    ],["Constructive Problem", -1266, -10741
  ]]}]}
]
